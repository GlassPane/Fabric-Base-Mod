import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "fabric-loom" version "0.2.3-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.1.2"
    id "net.minecrell.licenser" version "0.2.1"
    id "maven-publish"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = project.maven_group
archivesBaseName = project.name.toLowerCase(Locale.ROOT)
version = System.getenv("TRAVIS_TAG") ?: project.mod_version
println("Setting version: " + version)

apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/basic_project.gradle"
try {
    apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/dependencies/${minecraft_version}/development_suite.gradle"
} catch (MissingResourceException e) {
    System.err.println(e.message)
}

processResources {
    // this will ensure that this task is redone when there"s a change
    inputs.property "version", project.version

    // replace stuff in fabric.mod.json, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"

        // add mod metadata
        expand "version": project.version , //"changelog_url": project.changelog_url,
                "curseforge_id": project.curseforge_id, "license": project.license_header

        filter { String line ->
            line.replace("\"fabric\": \"*\"", "\"fabric\": \"[${project.fabric_version},)\"")
        }
    }

    // copy everything else, that"s not the fabric.mod.json
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

repositories {
    maven {
        name = "NerdHubMC"
        url = "https://maven.abusedmaster.xyz"
    }
    maven {
        name = "FabricMC"
        url = "https://maven.fabricmc.net"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}"
    modCompile "net.fabricmc:fabric-loader:${loader_version}"

    modCompile "com.github.GlassPane:Mesh:${mesh_version}"

    //optional dependency!
    modCompile "net.fabricmc:fabric:${fabric_version}"
}

license {
    header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")

    // Apply licenses only to main source set
    sourceSets = [project.sourceSets.main]
    include "**/*.java"

    newLine = false // Disables the empty line between the header and package name
    //ignoreFailures = true //Ignore failures and only print a warning on license violations

    //export variables
    ext {
        year = Year.now()
        projectDisplayName = project.name
        projectOwners = rootProject.owners
        if (project.license_header.contains('GPL')) {
            if (!project.hasProperty("gpl_version")) {
                throw new RuntimeException("GPL version needs to be specified through the 'gpl_version' property")
            }
            gplVersion = project.gpl_version
        }
    }
}
